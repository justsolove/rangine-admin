<?php


namespace W7\Tests;

class TestCache {
	public function ok() {

	}
}


class CacheTest extends TestCase {
	protected $redis;

	public function setUp(): void {
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->redis = icache();
	}

	public function testCache() {
		icache()->set('test', 'test1');
		$ret = icache()->get('test');
		$this->assertSame('test1', $ret);

		icache()->set('test', [
			'test1' => 1
		]);
		$ret = icache()->get('test');
		$this->assertArrayHasKey('test1', $ret);

		$obj = new TestCache();
		icache()->set('obj', $obj);
		$ret = icache()->get('obj');
		$this->assertSame(true, method_exists($ret, 'ok'));

		icache()->set('obj', serialize($obj));
		$ret = icache()->get('obj');
		$this->assertSame(true, method_exists(unserialize($ret), 'ok'));

		icache()->setMultiple([
			'test' => [
				'test1' => 1
			],
			'test1' => [
				'test2' => 2
			]
		]);
		$ret = icache()->getMultiple(['test', 'test1']);
		$this->assertArrayHasKey('test', $ret);
		$this->assertArrayHasKey('test1', $ret['test']);
	}

	public function testHmsetAndHmget() {
		$key    = uniqid();
		$result = $this->redis->hMset($key, ['key' => 'value', 'key2' => 'value2', 'key3' => 'value3']);
		$this->assertEquals(true, $result);

		$data   = [
			'key2' => 'value2',
			'key'  => 'value',
		];
		$values = $this->redis->hMGet($key, ['key2', 'key']);
		$this->assertEquals($data, $values);

		$data   = [
			'NotExistKey'  => false,
			'NotExistKey2' => false,
		];
		$values = $this->redis->hMGet($key, ['NotExistKey', 'NotExistKey2']);
		$this->assertEquals($data, $values);

		$this->redis->set($key, 'xxxxx');
		$result = $this->redis->hMGet($key,['key']);
		$this->assertFalse($result);

		$this->redis->delete($key);
		$result = $this->redis->hMGet($key, ['key']);
		$this->assertEquals(['key' => false], $result);

		$this->redis->sAdd($key, 'xxxxx');
		$result = $this->redis->hMGet($key, ['key']);
		$this->assertFalse($result);
	}

	public function testHmsetAndHmgetByCo() {
		go(function () {
			$this->testHmsetAndHmget();
		});
	}

	public function testHGetAll() {
		$key = uniqid();
		$result = $this->redis->hMset($key, ['key' => 'value', 'key2' => 'value2', 'key3' => 'value3']);
		$this->assertEquals(true, $result);

		$result = $this->redis->hGetAll($key);
		$this->assertEquals(['key' => 'value', 'key2' => 'value2', 'key3' => 'value3'], $result);

		$this->redis->set($key, 'xxxxx');
		$result = $this->redis->hGetAll($key);
		$this->assertFalse($result);

		$this->redis->delete($key);
		$result = $this->redis->hGetAll($key);
		$this->assertEquals([], $result);

		$this->redis->sAdd($key, 'xxxxx');
		$result = $this->redis->hGetAll($key);
		$this->assertFalse($result);
	}

	public function testHGetAllByCo() {
		go(function () {
			$this->testHGetAll();
		});
	}

	public function testHIncrBy() {
		$key = uniqid();
		/** @var \Redis $redis */
		$redis = $this->redis;
		$result = $redis->hIncrBy($key, 'incr', 2);
		$this->assertEquals(2, $result);
		$result = $redis->hIncrBy($key, 'incr', 2);
		$this->assertEquals(4, $result);
		$result = $redis->hGet($key, 'incr');
		$this->assertEquals(4, $result);
	}

	public function testHIncrByCo() {
		go(function () {
			$this->testHIncrBy();
		});
	}

	public function testHSetNx() {
		$key = uniqid();
		/** @var \Redis $redis */
		$redis = $this->redis;
		$result = $redis->hSetNx($key, 'one', 1);
		$this->assertTrue($result);

		$result = $redis->hSetNx($key, 'one', 1);
		$this->assertFalse($result);
	}

	public function testHSetNxByCo() {
		go(function () {
			$this->testHSetNx();
		});
	}

	public function testHDel() {
		$key = uniqid();
		/** @var \Redis $redis */
		$redis = $this->redis;
		$result = $redis->hSetNx($key, 'one', 1);
		$this->assertTrue($result);
		$result = $redis->hSetNx($key, 'two', 2);
		$this->assertTrue($result);
		$result = $redis->hSetNx($key, 'three', 3);
		$this->assertTrue($result);

		$result = $redis->hDel($key, 'one', 'two');
		$this->assertEquals(2, $result);
		$result = $redis->hGetAll($key);
		$this->assertEquals(['three' => 3], $result);
	}

	public function testHDelByCo() {
		go(function () {
			$this->testHDel();
		});
	}

	public function testHLen() {
		$key = uniqid();
		/** @var \Redis $redis */
		$redis = $this->redis;
		$result = $redis->hSetNx($key, 'one', 1);
		$this->assertTrue($result);
		$result = $redis->hSetNx($key, 'two', 2);
		$this->assertTrue($result);
		$result = $redis->hSetNx($key, 'three', 3);
		$this->assertTrue($result);

		$result = $redis->hLen($key);
		$this->assertEquals(3, $result);
	}

	public function testHLenByCo() {
		go(function () {
			$this->testHLen();
		});
	}

	public function testHExists() {
		$key = uniqid();
		/** @var \Redis $redis */
		$redis = $this->redis;
		$result = $redis->hSetNx($key, 'one', 1);
		$this->assertTrue($result);

		$result = $redis->hExists($key, 'one');
		$this->assertTrue($result);
		$result = $redis->hExists($key, 'two');
		$this->assertFalse($result);
	}

	public function testHExistsByCo() {
		go(function () {
			$this->testHExists();
		});
	}

	public function testHValsAndHKeys() {
		$key = uniqid();
		/** @var \Redis $redis */
		$redis = $this->redis;
		$result = $redis->hMset($key, ['one' => 1, 'two' => 'hello', 'three' => 'world']);
		$this->assertTrue($result);

		$result = $redis->hKeys($key);
		$this->assertEquals(['one', 'two', 'three'], $result);

		$result = $redis->hVals($key);
		$this->assertEquals([1, 'hello', 'world'], $result);
	}

	public function testHValsAndHKeysByCo() {
		go(function () {
			$this->testHValsAndHKeys();
		});
	}

	public function testSaddAndSMembers() {
		$key    = uniqid();
		$value1 = uniqid();
		$value2 = uniqid();
		$value3 = uniqid();
		$value4 = uniqid();

		$this->redis->sAdd($key, $value1, $value2, $value3);
		$this->redis->sAdd($key, $value4);

		$values = [$value1, $value2, $value3, $value4];

		$members = $this->redis->sMembers($key);
		sort($members);
		sort($values);

		$this->assertEquals($members, $values);
	}

	public function testSaddAndSMembersByCo() {
		go(function () {
			$this->testSaddAndSMembers();
		});
	}

	public function testSremoveAndScontainsAndScard() {
		$key    = uniqid();
		$value1 = uniqid();
		$value2 = uniqid();
		$this->redis->sAdd($key, $value1, $value2);
		$result = $this->redis->sMembers($key);
		$this->assertCount(2, $result);

		$result = $this->redis->sIsMember($key, $value1);
		$this->assertTrue($result);

		$result = $this->redis->sCard($key);
		$this->assertEquals(2, $result);

		$result = $this->redis->sRem($key, $value1);
		$this->assertEquals(1, $result);

		$members = $this->redis->sMembers($key);
		$this->assertCount(1, $members);
	}

	public function testSremoveByCo() {
		go(function () {
			$this->testSremoveAndScontainsAndScard();
		});
	}

	public function testZadd() {
		$key = uniqid();
		$ret = $this->redis->zAdd($key, 1.1, 'key');
		$this->assertEquals($ret, 1);

		$ret2 = $this->redis->zAdd($key, 1.3, 'key2');
		$this->assertEquals($ret2, 1);

		$ret3 = $this->redis->zAdd($key, 3.2, 'key3');
		$this->assertEquals($ret3, 1);

		$ret4 = $this->redis->zAdd($key, 1.2, 'key4');
		$this->assertEquals($ret4, 1);

		$ret5 = $this->redis->zAdd($key, 5.2, 'key5');
		$this->assertEquals($ret5, 1);

		$keys = $this->redis->zRange($key, 0, -1);
		$this->assertCount(5, $keys);

		$data = [
			'key4',
			'key2',
			'key3',
		];
		$rangeKeys = $this->redis->zRangeByScore($key, 1.2, 3.2);
		$this->assertEquals($data, $rangeKeys);

		$data2 = [
			'key4' => 1.2,
			'key2' => 1.3,
			'key3' => 3.2,
		];
		$rangeKeys = $this->redis->zRange($key, 1.2, 3.2, 'WITHSCORES');
		$this->assertEquals(array_keys($data2), $rangeKeys);

		$rangeKeys = $this->redis->zRange($key, 1.2, 3.2, false);
		$this->assertEquals($data, $rangeKeys);

		$rangeKeys = $this->redis->zRange($key, 1.2, 3.2, true);
		$this->assertEquals($data2, $rangeKeys);

		$rangeKeys = $this->redis->zRange($key, 1.2, 3.2, 0);
		$this->assertEquals($data, $rangeKeys);

		$rangeKeys = $this->redis->zRange($key, 1.2, 3.2, 'xxx');
		$this->assertEquals(array_keys($data2), $rangeKeys);

		/** @var \Redis $redis */
		$redis = $this->redis;
		$rangeKeys = $redis->zRangeByScore($key, 1, 2, [
			'limit' => [1, 1]
		]);
		$this->assertEquals(['key4'], $rangeKeys);

		$rangeKeys = $redis->zRangeByScore($key, 1, 2, [
			'withscores' => true,
			'limit' => [1, 1]
		]);
		$this->assertEquals(['key4' => 1.2], $rangeKeys);

		$rangeKeys = $redis->zRangeByScore($key, 1.2, 3.2, [
			'withscores' => true
		]);
		$this->assertEquals($data2, $rangeKeys);

		$rangeKeys = $redis->zRevRangeByScore($key, 2, 1, [
			'limit' => [0, 1]
		]);
		$this->assertEquals(['key2'], $rangeKeys);

		$rangeKeys = $redis->zRevRangeByScore($key, 2, 1, [
			'limit' => [0, 1],
			'withscores' => true
		]);
		$this->assertEquals(['key2' => 1.3], $rangeKeys);

		$rangeKeys = $redis->zRevRangeByScore($key, 3.2, 1.2, [
			'withscores' => true
		]);
		$this->assertEquals(['key3' => 3.2, 'key2' => 1.3, 'key4' => 1.2], $rangeKeys);
	}

	public function testZaddByCo() {
		go(function () {
			$this->testZadd();
		});
	}

	public function testlPush() {
		go(function () {
			$key = uniqid();
			$result = $this->redis->lPush($key, 'A');
			$this->assertEquals($result, 1);
			$result = $this->redis->lPush($key, 'B');
			$this->assertEquals($result, 2);
		});
	}

	public function testlPushx() {
		go(function () {
			$key = uniqid();
			$result = $this->redis->lPushx($key, 'A');
			$this->assertEquals($result, 0);
			$result = $this->redis->lPush($key, 'A');
			$this->assertEquals($result, 1);
			$result = $this->redis->lPush($key, 'B');
			$this->assertEquals($result, 2);
		});
	}

	public function testrPush() {
		go(function () {
			$key = uniqid();
			$result = $this->redis->rPush($key, 'A');
			$this->assertEquals($result, 1);
			$result = $this->redis->rPush($key, 'B');
			$this->assertEquals($result, 2);
		});
	}

	public function testrPushx() {
		go(function () {
			$key = uniqid();
			$result = $this->redis->rPushx($key, 'A');
			$this->assertEquals($result, 0);
			$result = $this->redis->rPush($key, 'A');
			$this->assertEquals($result, 1);
			$result = $this->redis->rPush($key, 'B');
			$this->assertEquals($result, 2);
		});
	}

	public function testlLen() {
		go(function () {
			$key = uniqid();
			$result = $this->redis->lPush($key, 'A');
			$lenResult = $this->redis->lLen($key);
			$this->assertEquals($result, $lenResult);
		});
	}

	public function testlPop() {
		go(function () {
			$key = uniqid();
			$this->redis->lPush($key, 'A');
			$this->redis->lPush($key, 'B');
			$this->redis->lPush($key, 'C');

			$result = $this->redis->lPop($key);
			$this->assertEquals('C', $result);
		});
	}

	public function testrPop() {
		go(function () {
			$key = uniqid();
			$this->redis->rPush($key, 'A');
			$this->redis->rPush($key, 'B');
			$this->redis->rPush($key, 'C');

			$result = $this->redis->rPop($key);
			$this->assertEquals('C', $result);
		});
	}

	public function testlRange() {
		go(function () {
			$expected = [
				'A',
				'B',
				'C'
			];
			$key = uniqid();
			foreach ($expected as $value) {
				$this->redis->rPush($key, $value);
			}

			$result = $this->redis->lRange($key, 0, -1);
			foreach ($result as $index => $value) {
				$this->assertEquals($value, $expected[ $index ]);
			}
		});
	}

	public function testlIndex() {
		go(function () {
			$key = uniqid();
			$this->redis->rPush($key, 'A');
			$this->redis->rPush($key, 'B');
			$this->redis->rPush($key, 'C');

			$result = $this->redis->lIndex($key, 0);
			$this->assertEquals('A', $result);

			$result = $this->redis->lIndex($key, -1);
			$this->assertEquals('C', $result);

			$result = $this->redis->lIndex($key, 10);
			$this->assertFalse($result);
		});
	}

	public function testlInsert() {
		go(function () {
			$key = uniqid();

			$expected = [
				'A',
				'B',
				'C'
			];

			$result = $this->redis->lInsert($key, 'after', 'A', 'X');
			$this->assertEquals($result, 0);

			foreach ($expected as $value) {
				$this->redis->lPush($key, $value);
			}

			$result = $this->redis->lInsert($key, 'before', 'C', 'X');
			array_push($expected, 'X');
			$expected = array_reverse($expected);

			$this->assertEquals($result, $this->redis->lLen($key));
			$result = $this->redis->lRange($key, 0, -1);

			foreach ($result as $index => $value) {
				$this->assertEquals($value, $expected[ $index ]);
			}

		});
	}

	public function testlRem() {
		go(function () {
			$key = uniqid();
			$expected = [
				'A',
				'B',
				'C',
				'A',
				'A',
				'C'
			];

			foreach ($expected as $value) {
				$this->redis->lPush($key, $value);
			}

			$counts = array_count_values($expected);
			$result = $this->redis->lRem($key, 'A');

			$this->assertEquals($result, $counts['A']);

			$result = $this->redis->lRem($key, 'C', 1);

			$this->assertEquals($result, $counts['C'] - 1);

			$this->assertEquals($this->redis->lLen($key), 2);
		});
	}

	public function testlSet() {
		go(function () {
			$key = uniqid();
			$expected = [
				'A',
				'B',
				'C',
			];

			foreach ($expected as $value) {
				$this->redis->lPush($key, $value);
			}
			$this->redis->lSet($key, 0, 'A2');

			$this->assertEquals($this->redis->lIndex($key, 0), 'A2');
		});
	}

	/**
	 * @bug [swoole-bug]
	 */
	public function testlTrim() {
		go(function () {
			$key = uniqid();
			$expected = [
				'A',
				'B',
				'C',
			];

			foreach ($expected as $value) {
				$this->redis->lPush($key, $value);
			}

			/* array('C', 'B', 'A') */
			$this->redis->lTrim($key, 0, 1);
			$expected = [
				'C',
				'B'
			];

			/* expected:array('C', 'B'),but it will return array('C', 'B', 'A')  */
			foreach ($this->redis->lRange($key, 0, -1) as $index => $value) {
				$this->assertEquals($value, $expected[ $index ]);
			}
		});
	}

	public function testblPop() {
		go(function () {
			$key = uniqid();
			$expected = [
				'A',
				'B',
				'C',
			];

			foreach ($expected as $value) {
				$this->redis->lPush($key, $value);
			}


			$expected = 'C';

			go(function () use ($key, $expected) {
				$result = $this->redis->blPop($key, 6);
				$this->assertEquals($result[1], $expected);
			});

			go(function () use ($key, $expected) {
				\co::sleep(3.0);
				$this->redis->lPush($key, $expected);
			});
		});
	}
}